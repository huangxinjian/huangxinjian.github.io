(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{215:function(t,s,a){"use strict";a.r(s);var e=a(28),_=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mysql-事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-事务"}},[t._v("#")]),t._v(" MySQL 事务")]),t._v(" "),a("p",[t._v("事务是保证一组数据库操作要么全部成功，要么全部失败，例如小李给小张转账100元，需要扣除小李的余额和新增小张的余额，这两个操作都必须同时成功，只要有一个失败，另外一个就算成功了，也算是失败。")]),t._v(" "),a("p",[t._v("在 MySQL 中，事务是由存储引擎层实现的，并且实现了事务的存储引擎并不多，"),a("code",[t._v("InnoDB")]),t._v(" 就是其中一个。下面也是重点介绍 "),a("code",[t._v("InnoDB")]),t._v(" 实现的事务机制。")]),t._v(" "),a("h2",{attrs:{id:"事务的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的作用"}},[t._v("#")]),t._v(" 事务的作用")]),t._v(" "),a("p",[t._v("事务可以用来管理一系列的 "),a("code",[t._v("DML、DCL、DDL")]),t._v(" 语句，比如 "),a("code",[t._v("insert")]),t._v("、"),a("code",[t._v("update")]),t._v("、"),a("code",[t._v("delete")]),t._v(" 这些需要操作表数据的语句。"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("另外，事务默认情况下是自动提交的")])]),t._v(" "),a("p",[t._v("不过事务的自动提交可以通过 "),a("code",[t._v("set autocommit=0")]),t._v(" 来关闭掉，但是这样当我们执行一个 "),a("code",[t._v("select")]),t._v(" 语句时，事务就会被开启，并且不会被自动提交除非我们主动执行了 "),a("code",[t._v("commit")]),t._v(" 或 "),a("code",[t._v("rollback")]),t._v(" 或者被断开了连接。")]),t._v(" "),a("h2",{attrs:{id:"事务的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的特性"}},[t._v("#")]),t._v(" 事务的特性")]),t._v(" "),a("p",[t._v("事务有著名的四大特性 —— "),a("code",[t._v("ACID")]),t._v(" ，分别是：")]),t._v(" "),a("ul",[a("li",[t._v("原子性（Atomicity）：构成事务的的所有操作必须是一个逻辑单元，要么全部执行，要么全部不执行。")]),t._v(" "),a("li",[t._v("一致性（Consistency）：数据库在事务执行前后状态都必须是稳定的或者是一致的。")]),t._v(" "),a("li",[t._v("隔离性（Isolation）：不同的事务之间不会相互影响")]),t._v(" "),a("li",[t._v("持久性（Durability）：事务执行成功后必须全部写入磁盘")])]),t._v(" "),a("h2",{attrs:{id:"开启事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开启事务"}},[t._v("#")]),t._v(" 开启事务")]),t._v(" "),a("p",[t._v("开启事务通常通过 "),a("code",[t._v("begin")]),t._v(" 或 "),a("code",[t._v("start transaction")]),t._v(" , 或者 "),a("code",[t._v("start transaction with consistent snapshot")]),t._v(" 这两者之间的区别会在后面的 MVCC 多版本并发控制进行讲解。")]),t._v(" "),a("p",[t._v("当一组数据库操作执行完成后，需要对事务进行提交或者回滚：")]),t._v(" "),a("ul",[a("li",[t._v("提交通过 "),a("code",[t._v("commit")]),t._v("，当提交事务后，数据会被持久化到磁盘中。")]),t._v(" "),a("li",[t._v("回滚通过 "),a("code",[t._v("rollback")]),t._v("，当回滚事务后，会撤销该事务正在进行的未提交的修改。")])]),t._v(" "),a("p",[t._v("因为事务是由 innodb 实现的，下面详细介绍 innodb 存储引擎是如何实现事务的。")]),t._v(" "),a("h2",{attrs:{id:"innodb-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb-架构"}},[t._v("#")]),t._v(" InnoDB 架构")]),t._v(" "),a("p",[t._v("首先看一下 "),a("code",[t._v("innoDb")]),t._v(" 的架构图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/mysql_img/innodbjiagou.png",alt:"mysql"}})]),t._v(" "),a("p",[t._v("可以看到，"),a("code",[t._v("InnoDB")]),t._v(" 一共分为四个区域")]),t._v(" "),a("ol",[a("li",[t._v("一个是最上方的内存区，用来暂时保存 SQL 执行的结果")]),t._v(" "),a("li",[t._v("中间是 MySQL 的工作线程，用来负责将数据进行持久化到硬盘和清理日志文件")]),t._v(" "),a("li",[t._v("然后是操作系统的内核缓存，用来中转数据")]),t._v(" "),a("li",[t._v("最后就是物理文件了，包括共享表空间和用户表空间以及日志文件。")])]),t._v(" "),a("h3",{attrs:{id:"buffer-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffer-pool"}},[t._v("#")]),t._v(" Buffer Pool")]),t._v(" "),a("p",[a("code",[t._v("Buffer Pool")]),t._v(" 是 MySQL 的内存缓冲池，用来暂时存放事务中修改的数据，它分为六个区域：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("data page")]),t._v("：数据页")]),t._v(" "),a("li",[a("code",[t._v("index page")]),t._v("：索引页")]),t._v(" "),a("li",[a("code",[t._v("insert buffer page")]),t._v("：插入页")]),t._v(" "),a("li",[a("code",[t._v("adaptive hash index")]),t._v("：自适应hash")]),t._v(" "),a("li",[a("code",[t._v("lock info")]),t._v("：锁信息")]),t._v(" "),a("li",[a("code",[t._v("data dictionary")]),t._v("：数据字典")])]),t._v(" "),a("p",[a("strong",[t._v("data page")])]),t._v(" "),a("p",[t._v("这里存储的是数据页，首先要明确的是，页是 InnoDB 中的最基本的存储结构，也是 "),a("code",[t._v("InnoDB")]),t._v(" 磁盘管理的最小单位，一页的大小是 "),a("code",[t._v("16KB")]),t._v("。每当执行修改删除的时候，旧数据页都会先被读取到内存中，也就是 "),a("code",[t._v("buffer pool")]),t._v(" ，然后在这个内存页上进行修改或删除，"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("这样的页与磁盘上的页数据是不一致的，并且由于还没持久化到磁盘上，被称之为脏页")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("adaptive hash index")])]),t._v(" "),a("p",[t._v("自适应 hash 索引，是 "),a("code",[t._v("InnoDB")]),t._v(" 为了加快检索效率的一种机制，它会将一些查询次数的多的，即热点数据，为热点页建立一个hash索引，加快查询效率。")]),t._v(" "),a("p",[a("strong",[t._v("lock info")])]),t._v(" "),a("p",[t._v("记录行锁、表锁等信息")]),t._v(" "),a("p",[a("strong",[t._v("data dictionary")]),t._v("\n数据字典，记录元数据信息，例如表结果、数据库名、表名、字段的数据类型、视图、索引、表字段信息、存储过程、触发器等内容。")]),t._v(" "),a("h3",{attrs:{id:"insert-buffer-page"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insert-buffer-page"}},[t._v("#")]),t._v(" insert buffer page")]),t._v(" "),a("p",[a("code",[t._v("insert buffer page")]),t._v(" 在新版本后又称为 "),a("code",[t._v("change buffer")]),t._v("，因为也可以支持 "),a("code",[t._v("update")]),t._v("、"),a("code",[t._v("delete")]),t._v(" 了。这个 buffer 的作用是可以减少随机IO读取表空间的损耗。")]),t._v(" "),a("p",[t._v("当在进行插入、更新、删除操作的时候，如果在内存中没有找到对应的数据页来修改的话，有两种方式来记录这个改变：")]),t._v(" "),a("ul",[a("li",[t._v("从磁盘中读出这个页的数据到内存中，然后修改它形成脏页")]),t._v(" "),a("li",[t._v("先将这个步骤存放在某一个特殊的内存区中，等到下次有事务读这个页的数据的时候，再进行 "),a("code",[t._v("merge")]),t._v(" 操作合并形成脏页，再返回读取的结果。")])]),t._v(" "),a("p",[t._v("其中第二种方式就可以有效降低磁盘随机IO读取页的损耗，它可以先囤一定数量的操作在内存中，等到有人读的时候，再形成结果返回。")]),t._v(" "),a("h3",{attrs:{id:"redo-log-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redo-log-buffer"}},[t._v("#")]),t._v(" redo log buffer")]),t._v(" "),a("p",[a("code",[t._v("redo log buffer")]),t._v(" 叫做重做日志缓冲，最大的作用就是"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("可以实现崩溃恢复")]),t._v("，这是因为在 "),a("code",[t._v("InnoDB")]),t._v(" 中，在持久化数据之前，即提交事务的时候，会先将数据的物理修改内容写入"),a("code",[t._v("redo log")]),t._v("日志中，然后再在适当的时间点将脏页数据写入磁盘的表空间中。这种策略称为 "),a("code",[t._v("WAL (Write Ahead Log)")]),t._v(" 预写日志策略。")]),t._v(" "),a("p",[t._v("这样一旦内存崩溃了，MySQL 重启之后，也可以从 "),a("code",[t._v("redo log")]),t._v(" 中重新加载回事务的数据到内存中，实现了数据的持久化，保证了数据的可靠性。")]),t._v(" "),a("p",[a("code",[t._v("redo log buffer")]),t._v(" 的默认大小为16Mb，Innodb 存储引擎先将重做日志写入 "),a("code",[t._v("redo log buffer")]),t._v("中，然后会通过以下三种方式将 Innodb 日志缓冲区的日志刷新到磁盘：")]),t._v(" "),a("ul",[a("li",[t._v("Master Thread 每秒一次执行刷新 "),a("code",[t._v("Innodb_log_buffer")]),t._v(" 到重做日志文件")]),t._v(" "),a("li",[t._v("每个事务提交时会刷新。")]),t._v(" "),a("li",[t._v("当重做日志缓存可用空间 少于一半时，重做日志缓存被刷新到重做日志文件。")])]),t._v(" "),a("p",[t._v("因此重做日志的写盘，并不一定是随着事务的提交才写入重做日志文件的，而是随着事务的开始，逐步开始的。")]),t._v(" "),a("h2",{attrs:{id:"innodb-的磁盘结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb-的磁盘结构"}},[t._v("#")]),t._v(" InnoDB 的磁盘结构")]),t._v(" "),a("p",[t._v("InnoDB 磁盘分为共享表空间和用户表空间，表的数据和索引等信息都会存入这两个表空间中。")]),t._v(" "),a("h3",{attrs:{id:"共享表空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享表空间"}},[t._v("#")]),t._v(" 共享表空间")]),t._v(" "),a("p",[a("code",[t._v("InnoDB")]),t._v(" 系统表空间包括了：")]),t._v(" "),a("ul",[a("li",[t._v("数据字典(data dictionary)：记录数据库相关信息")]),t._v(" "),a("li",[t._v("doublewrite write buffer：解决部分写失败（页断裂）")]),t._v(" "),a("li",[t._v("insert buffer：内存insert buffer数据，周期写入共享表空间，防止意外宕机")]),t._v(" "),a("li",[t._v("回滚段(rollback segments)")]),t._v(" "),a("li",[t._v("undo空间：undo页")])]),t._v(" "),a("p",[t._v("共享表空间默认只有一个文件组成，初始化大小为 "),a("code",[t._v("10MB")]),t._v(" ，名称是 "),a("code",[t._v("ibdata1")]),t._v("，被创建在 mysql 的数据目录下，可以通过参数 "),a("code",[t._v("innodb_data_file_path")]),t._v(" 对文件的数量和大小进行修改：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 格式：innodb_data_file_path=datafile1[,datafile2]...")]),t._v("\ninnodb_data_file_path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("db"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ibdata1:"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("M"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("dr2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("db"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ibdata2:"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("M:autoextend\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("这里就指定了共享表空间是两个文件 "),a("code",[t._v("ibdata1")]),t._v(" 和 "),a("code",[t._v("ibdata2")]),t._v(" , 并且指定了大小是 "),a("code",[t._v("1000M")]),t._v(" ，还指定了属性 "),a("code",[t._v("autoextend")]),t._v(" ,当表空间满了的时候会自动扩展。")]),t._v(" "),a("h3",{attrs:{id:"用户表空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户表空间"}},[t._v("#")]),t._v(" 用户表空间")]),t._v(" "),a("p",[t._v("当设置了参数 "),a("code",[t._v("innodb_file_per_table")]),t._v(" 时，还可以为每个基于 "),a("code",[t._v("innodb")]),t._v(" 存储引擎的表产生一个单独的用户表空间，命名规则是 "),a("code",[t._v(".ibd")])]),t._v(" "),a("p",[t._v("这样子就不用将所有的数据都存放到共享表空间中，不过用户表空间也只会存储该表的数据、索引和插入缓冲等信息，其他信息例如元数据之类的还是存放在共享表空间中。")]),t._v(" "),a("h2",{attrs:{id:"事务持久化实现机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务持久化实现机制"}},[t._v("#")]),t._v(" 事务持久化实现机制")]),t._v(" "),a("p",[a("code",[t._v("InnoDB")]),t._v(" 对于数据文件和日志文件的刷盘遵守 "),a("code",[t._v("WAL(Write ahead redo log)")]),t._v(" 和 "),a("code",[t._v("Force-log-at-commit")]),t._v(" 两种规则，二者保证了事务的持久性。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("WAL")]),t._v(" 要求数据的变更写入到磁盘前，首先必须将内存中的日志写入到磁盘；")]),t._v(" "),a("li",[a("code",[t._v("Force-log-at-commit")]),t._v(" 要求当一个事务提交时，所有产生的日志都必须刷新到磁盘上。")])]),t._v(" "),a("p",[t._v("这样如果日志刷盘成功后，就算缓冲池中的数据在落盘前宕机了，那么重启时，数据库可以从日志中恢复数据到表空间中。")]),t._v(" "),a("p",[t._v("下面先研究下到底是如何将数据从 "),a("code",[t._v("buffer pool")]),t._v(" 落盘到重做日志中的。首先看下面图的右边部分：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/mysql_img/redologluopan.png",alt:"s"}})]),t._v(" "),a("p",[t._v("当执行 "),a("code",[t._v("commit")]),t._v(" 语句后（还有另外两种机制，上面写了），数据会从 "),a("code",[t._v("buffer pool")]),t._v(" 中会生成一个 "),a("code",[t._v("redo page")]),t._v(" 然后写入到 "),a("code",[t._v("redo log buffer")]),t._v(" 中,然后通过某种落盘机制，将事务的数据写入到 "),a("code",[t._v("redo log file")]),t._v(" 中，使它真正落盘。")]),t._v(" "),a("p",[t._v("这一系列操作称为 "),a("code",[t._v("Force Log at Commit")]),t._v(" , 它就是实现事务的持久性的一份子，"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("即当事务提交的时候，必须先将数据写入到 "),a("code",[t._v("redo log file")]),t._v(" 中，这个事务才算提交完成")]),t._v("。")]),t._v(" "),a("p",[t._v("另外，操作系统的文件系统是带有缓存的，当"),a("code",[t._v("InnoDB")]),t._v("向磁盘写入数据时，有可能只是写入到了文件系统的缓存中，没有真正的“落袋为安”。其流程如下：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("redo log buff ---mysql 工作线程写 (write)---\x3e redo log file ---OS刷新 (flush)---\x3e disk\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("是否需要马上写入到文件而不是缓存中，就是下面要介绍的落盘机制了，这个机制体现了 "),a("code",[t._v("Force log at commit")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"重做日志落盘机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重做日志落盘机制"}},[t._v("#")]),t._v(" 重做日志落盘机制")]),t._v(" "),a("p",[a("code",[t._v("redo log")]),t._v(" 的落盘机制有三种，主要通过 "),a("code",[t._v("innodb_flush_log_at_trx_commit")]),t._v(" 来控制，对应的值分别是 "),a("code",[t._v("0")]),t._v("、"),a("code",[t._v("1（默认）")]),t._v("、"),a("code",[t._v("2")]),t._v("，可以通过以下命令查询：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/mysql_img/redodefault.png",alt:"img"}})]),t._v(" "),a("p",[t._v("这三个值之间的区别如下：")]),t._v(" "),a("ul",[a("li",[t._v("当它是 "),a("code",[t._v("0")]),t._v(" 时，代表每次事务提交时，只会先将数据从 "),a("code",[t._v("buffer pool")]),t._v(" 写入到 "),a("code",[t._v("redo buffer")]),t._v(" 就不管了，后面每个一个时间（通常是 1 秒）会由子线程负责将它写入到操作系统文件缓存中并 "),a("code",[t._v("flush")]),t._v(" 到磁盘上。"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("因此，这种方式的效率最高，但是数据可靠性最低，如果在系统崩溃前还没写入 "),a("code",[t._v("redo log file")]),t._v(" 的话，重启后数据就丢失了。")])]),t._v(" "),a("li",[t._v("当它是 "),a("code",[t._v("1")]),t._v(" 时，代表每次事务提交时，会直接将数据写到操作系统文件缓存中并立即刷新到磁盘上。"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("这个级别的可以确保每次事务提交数据都会写入磁盘上，数据可靠性高。但是写入效率最低")])]),t._v(" "),a("li",[t._v("当它是 "),a("code",[t._v("2")]),t._v(" 时，代表每次事务提交时，会先将数据写入到操作系统文件缓存中，后面等操作系统自己决定什么时候再写入磁盘上。写入效率和可靠性差不多水平。")])]),t._v(" "),a("p",[t._v("图示如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/mysql_img/redofall.jpg",alt:"sd"}})]),t._v(" "),a("h3",{attrs:{id:"双写机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双写机制"}},[t._v("#")]),t._v(" 双写机制")]),t._v(" "),a("p",[t._v("单单靠 "),a("code",[t._v("redo log file")]),t._v(" 仅仅能保证日志的持久性，现在内存中的脏页数据还没有被持久化到共享表空间和用户表空间中。这就是上面图的左边了，由 "),a("code",[t._v("buffer pool")]),t._v(" 进行落盘到表空间。")]),t._v(" "),a("p",[t._v("这里的落盘同样有一种策略，称为 "),a("code",[t._v("double write")]),t._v(" 双写策略。这种策略解决了什么问题呢？首先需要知道：")]),t._v(" "),a("ol",[a("li",[t._v("数据库IO的最小单位是16K（MySQL默认，oracle是8K）")]),t._v(" "),a("li",[t._v("文件系统IO的最小单位是4K（也有1K的）")]),t._v(" "),a("li",[t._v("磁盘IO的最小单位是512字节")])]),t._v(" "),a("p",[t._v("也就是说，从 "),a("code",[t._v("buffer pool")]),t._v(" 写入磁盘上的页至少需要四次物理IO操作，一次写入4K，但是这样有可能会出意外，如果写入了两次的时候，系统断电了，那么这个页就没写完整，称为页断裂。")]),t._v(" "),a("p",[t._v("因此需要双写机制，当触发系统中设置的脏页落盘机制时：")]),t._v(" "),a("ol",[a("li",[t._v("首先将 "),a("code",[t._v("buffer pool")]),t._v(" 的脏页数据通过"),a("code",[t._v("memcpy")]),t._v("函数写入到 "),a("code",[t._v("double write pool")]),t._v(" 中，然后每次取 "),a("code",[t._v("2M")]),t._v(" 出来")]),t._v(" "),a("li",[t._v("接着会"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("分两次从"),a("code",[t._v("double write pool")]),t._v("读取"),a("code",[t._v("1M")]),t._v("的数据写入到共享表空间中，然后马上调用fsync函数，同步磁盘，避免操作系统缓冲写带来的问题。这里是顺序IO写入，速度很快")])]),t._v(" "),a("li",[t._v("第二步完成后，再将 "),a("code",[t._v("buffer write pool")]),t._v(" 中的脏页数据写入对应的用户表空间，这里是随机IO,速度较慢，"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("这一步写完后，就会标记对应的 "),a("code",[t._v("double wrtie")]),t._v(" 可以被覆盖。")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("共享表空间即 ibdata,是磁盘是连续128个页，也是2M的大小。")])]),t._v(" "),a("h3",{attrs:{id:"双写机制的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双写机制的作用"}},[t._v("#")]),t._v(" 双写机制的作用")]),t._v(" "),a("p",[t._v("前面说到，由于磁盘IO限制的原因，写入用户表空间的时候，可能会发生页断裂的情况，但如果我们先将这些写入共享表空间，这样当在写入用户表空间的时候，即使宕机了，"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("重启之后也可以从共享表空间中的"),a("code",[t._v("double write")]),t._v("区域找到该页最近的版本")]),t._v("，从而恢复到用户表空间中。")]),t._v(" "),a("p",[t._v("那有人可能会问说，那 "),a("code",[t._v("redo log")]),t._v(" 不也记录了脏页数据吗，怎么不用它来恢复呢？这是因为 "),a("code",[t._v("redo log")]),t._v(" 记录的其实是数据的变化，而不是记录一整个页。例如，存在一个"),a("code",[t._v("test")]),t._v("数据文件的第1025个数据块的100字节的偏移位置，数据修改为了"),a("code",[t._v("new data")]),t._v("，"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("这时候"),a("code",[t._v("read log")]),t._v("记录的就是这个偏移位置修改了数据为 "),a("code",[t._v("new data")]),t._v("，而不是记录整个 16KB 的页。")])]),t._v(" "),a("p",[t._v("因此，"),a("code",[t._v("redo log")]),t._v(" 中的数据也是零散的，是无法回复完整的页的，这就是双写的作用。")]),t._v(" "),a("p",[t._v("即使在写入共享表空间时宕机了，由于 "),a("code",[t._v("redo log")]),t._v(" 已经被写入了，这样重启的时候，"),a("code",[t._v("buffer pool")]),t._v(" 中的数据也是可以从 "),a("code",[t._v("redo log")]),t._v(" 中恢复到内存中的，从而可以重新执行 "),a("code",[t._v("double write")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"双写机制的策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双写机制的策略"}},[t._v("#")]),t._v(" 双写机制的策略")]),t._v(" "),a("p",[t._v("上面讲到，"),a("code",[t._v("double write")]),t._v(" 只有在触发系统设置的数据页落盘机制时，才会执行。这里就要讲一下这个落盘机制是什么？这个机制称为"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("检查点 check point，它表示脏页需要写入磁盘的时机，一旦触发了检查点，就是需要刷新脏页数据到磁盘的时候了。")])]),t._v(" "),a("p",[t._v("检查点的作用是：")]),t._v(" "),a("ul",[a("li",[t._v("为数据可靠性做保证，缩短数据库的恢复时机")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("buffer pool")]),t._v(" 空间快不足的时候，将脏页刷入磁盘中")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("redo log buffer")]),t._v(" 快满的时候，刷新脏页到磁盘。")])]),t._v(" "),a("p",[t._v("检查点有几种，分别是：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("sharp checkpoint")])]),t._v(" "),a("li",[a("code",[t._v("fuzzy checkpoint")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("master thread checkpoint")])]),t._v(" "),a("li",[a("code",[t._v("flush_lru_list checkpoint")])]),t._v(" "),a("li",[a("code",[t._v("async/sync flush checkpoint")])]),t._v(" "),a("li",[a("code",[t._v("dirty page too much checkpoint")])])])])]),t._v(" "),a("h3",{attrs:{id:"sharp-checkpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sharp-checkpoint"}},[t._v("#")]),t._v(" sharp checkpoint")]),t._v(" "),a("p",[t._v("这个是完全检查点，只有当数据库完全关闭的时候，才会触发将所有的脏页写入磁盘中。")]),t._v(" "),a("h3",{attrs:{id:"fuzzy-checkpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fuzzy-checkpoint"}},[t._v("#")]),t._v(" fuzzy checkpoint")]),t._v(" "),a("p",[t._v("这个是模糊检查点，根据不同的设置触发脏页落盘。")]),t._v(" "),a("h4",{attrs:{id:"master-thread-checkpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master-thread-checkpoint"}},[t._v("#")]),t._v(" master thread checkpoint")]),t._v(" "),a("p",[t._v("主线程检查点，将会以每秒或者每十秒，从缓冲池的脏页中刷一定比例的页回磁盘，并且这个过程是异步的，由其它线程完成。")]),t._v(" "),a("h4",{attrs:{id:"flush-lru-list-checkpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flush-lru-list-checkpoint"}},[t._v("#")]),t._v(" flush_lru_list checkpoint")]),t._v(" "),a("p",[t._v("LRU 检查点，这里使用的 "),a("code",[t._v("LRU")]),t._v(" 最近最少使用算法，将最近最少使用的脏页数据刷新到磁盘中。")]),t._v(" "),a("h4",{attrs:{id:"async-sync-flush-checkpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-sync-flush-checkpoint"}},[t._v("#")]),t._v(" async/sync flush checkpoint")]),t._v(" "),a("p",[t._v("异步/同步刷盘检查点，当 "),a("code",[t._v("redo log file")]),t._v(" 快满的时候，会批量的触发数据页落盘。")]),t._v(" "),a("ul",[a("li",[t._v("当不可覆盖的 "),a("code",[t._v("redo log")]),t._v(" 达到 "),a("code",[t._v("log file")]),t._v(" 的 75%，将会异步刷盘")]),t._v(" "),a("li",[t._v("当不可覆盖的 "),a("code",[t._v("redo log")]),t._v(" 达到 "),a("code",[t._v("log file")]),t._v(" 的 90%，将会同步由主线程刷盘，此时 mysql 啥都不能做")])]),t._v(" "),a("h4",{attrs:{id:"dirty-page-too-much-checkpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dirty-page-too-much-checkpoint"}},[t._v("#")]),t._v(" dirty page too much checkpoint")]),t._v(" "),a("p",[t._v("脏页过多检查点，当 "),a("code",[t._v("buffer pool")]),t._v(" 快满的时候，也就是脏页过多的时候，这个过多大概是 75% ，就会触发刷盘。")]),t._v(" "),a("h2",{attrs:{id:"事务隔离性实现机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离性实现机制"}},[t._v("#")]),t._v(" 事务隔离性实现机制")]),t._v(" "),a("p",[t._v("下面讲解一下 Mysql 事务中的隔离性在 "),a("code",[t._v("innodb")]),t._v(" 中是如何实现的")]),t._v(" "),a("h3",{attrs:{id:"隔离级别介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别介绍"}},[t._v("#")]),t._v(" 隔离级别介绍")]),t._v(" "),a("p",[t._v("首先介绍一下隔离级别，在事务中，一共有四种隔离级别，分别是：")]),t._v(" "),a("ul",[a("li",[a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("读未提交（Read uncommitted）")]),t._v(": 事务 A 可以读到事务 B 还没提交的数据")]),t._v(" "),a("li",[a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("读已提交（Read committed）")]),t._v("：事务 A 只能读到事务 B 已经提交的数据")]),t._v(" "),a("li",[a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("可重复读（Repeatable read）")]),t._v("：事务 A 执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。")]),t._v(" "),a("li",[a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("串行化（Serializable）")]),t._v("：对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行")])]),t._v(" "),a("h3",{attrs:{id:"各个隔离级别的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#各个隔离级别的问题"}},[t._v("#")]),t._v(" 各个隔离级别的问题")]),t._v(" "),a("p",[t._v("首先阅读以下案例，假设除了用户A和用户B之外，其他用户的存款总额都为0，A、B用户各有存款1000，所以所有用户的存款总额为2000。")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--创建账户表并初始化数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" tacount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aname "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("acount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("primary")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" idx_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("首先演示在"),a("code",[t._v("读未提交 RU")]),t._v("隔离级别下存在的问题，首先设置隔离级别为 "),a("code",[t._v("RU")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--设置隔离级读未提交（read-uncommitted）")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uncommitted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("code",[t._v("session1")]),t._v(" 首先启动事务，开始查询 "),a("code",[t._v("a")]),t._v(" 的余额为 1000，然后 "),a("code",[t._v("session2")]),t._v(" 从账户 "),a("code",[t._v("b")]),t._v(" 划100块给 "),a("code",[t._v("a")]),t._v("。此时，"),a("code",[t._v("session1")]),t._v(" 再次查询账户 "),a("code",[t._v("a")]),t._v(" 的余额就是 1100 了，假如此时 "),a("code",[t._v("session2")]),t._v(" 发生了异常，回滚了数据，那么此时 "),a("code",[t._v("session1")]),t._v(" 读到的数据就是错误的。"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("这就是脏读，读到了另一个事务还没提交的数据。")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--session 1")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" aname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------+--------+")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" aname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" acount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------+--------+")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------+--------+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--session 2")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" acount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" aname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--session 1")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" aname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------+--------+")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" aname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" acount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------+--------+")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" b   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------+--------+")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[t._v("可以看到，在"),a("code",[t._v("读未提交")]),t._v("的隔离级别下，并发得不到任何的保障，因此可以将隔离级别设置为 "),a("code",[t._v("Serialization")]),t._v(" 序列化级别。")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--设置隔离级别为串行化（serializable） 死锁演示")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("在这个隔离级别下，读一条记录会加读锁，写一条记录会加写锁，这样当事务 A 读取一行记录的时候，其他事务都不能对该记录进行修改操作，从而保证可靠性，"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("这种通过锁机制保证并发的策略称为 "),a("code",[t._v("Locking-Base CC")])]),t._v("，但是这样会存在另一个问题，那就是"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("死锁")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- session1")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 给记录 a 加锁")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" aname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- session2")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 给记录 b 加锁了")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" acount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" aname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- session1")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 堵塞了，因为 b 现在被 session2 锁住中")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" aname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- session2")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 堵塞了，因为 a 现在被 session1 锁住中")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" tacount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" acount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("900")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" aname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[t._v("这时就需要另外一种机制，让它既可以支持并发，又可以保证事务不会读到未提交的事务，这种机制就是 "),a("code",[t._v("MVCC")]),t._v(" 多版本并发控制。这种机制在执行普通 "),a("code",[t._v("select")]),t._v(" 操作时不会加锁，提高了数据库的并发处理能力。")]),t._v(" "),a("h3",{attrs:{id:"mvcc-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvcc-实现"}},[t._v("#")]),t._v(" MVCC 实现")]),t._v(" "),a("blockquote",[a("p",[t._v("58沈剑大佬："),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=2651961444&idx=1&sn=830a93eb74ca484cbcedb06e485f611e&chksm=bd2d0db88a5a84ae5865cd05f8c7899153d16ec7e7976f06033f4fbfbecc2fdee6e8b89bb17b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么需要 MVCC"),a("OutboundLink")],1),t._v("，讲解了数据多版本和普通锁以及行读锁之间的区别。")])]),t._v(" "),a("p",[a("code",[t._v("MVCC")]),t._v(" 全称是 "),a("code",[t._v("Multiversion concurrency control")]),t._v(", 多版本并发控制。具体通过 "),a("code",[t._v("undo log")]),t._v(" 和 "),a("code",[t._v("read view")]),t._v(" 来实现的。")]),t._v(" "),a("h3",{attrs:{id:"undo-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undo-log"}},[t._v("#")]),t._v(" Undo Log")]),t._v(" "),a("p",[a("code",[t._v("undo log")]),t._v(" 即回滚日志，主要用于对事务进行回滚撤销以及用于在多版本并发控制提供历史版本。它记录了每个操作之前的状态，如果事务需要回滚，则根据 "),a("code",[t._v("undo log")]),t._v(" 进行回滚。")]),t._v(" "),a("p",[a("code",[t._v("undo log")]),t._v(" 的存储不同于 "),a("code",[t._v("redo log")]),t._v(" , 后者存的是单独的文件中，而前者是存放在共享表空间中的一个特殊的段，这个段叫做"),a("code",[t._v("回滚段")]),t._v("，在段中存放着一个个的区（Extent），每个区里面就是有很多个页，在回滚段里就是 "),a("code",[t._v("undo page")]),t._v("。这个 "),a("code",[t._v("page")]),t._v(" 和普通的数据页以及索引页类似。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/mysql_img/undopage.jpg",alt:"mysql"}})]),t._v(" "),a("p",[t._v("页里存放着每一行的数据，格式如下，其中前面是那三个字段分别对应该行的"),a("code",[t._v("rowid")]),t._v("、事务号"),a("code",[t._v("db_trx_id")]),t._v("和回滚指针"),a("code",[t._v("db_roll_ptr")]),t._v("，其中"),a("strong",{staticStyle:{color:"#3EAF7C"}},[a("code",[t._v("db_trx_id")]),t._v("表示最近修改的事务的id，"),a("code",[t._v("db_roll_ptr")]),t._v("指向"),a("strong",[t._v("回滚段中的"),a("code",[t._v("undo log")])]),t._v("。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/mysql_img/undorow.png",alt:"ds"}})]),t._v(" "),a("p",[t._v("由于 "),a("code",[t._v("redo log")]),t._v(" 会记录数据库中页的物理修改操作，而 "),a("code",[t._v("undo log")]),t._v(" 也属于其中的一份子，因此也会被记录到 "),a("code",[t._v("redo log")]),t._v(" 中,结合之前讲的，当执行一个 "),a("code",[t._v("update")]),t._v(" 事务时，完整的流程图如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/mysql_img/undotransacrtion.png",alt:"myg"}})]),t._v(" "),a("p",[t._v("当执行 "),a("code",[t._v("update")]),t._v(" 加锁后，会先生成"),a("code",[t._v("undo log")]),t._v(" 的 "),a("code",[t._v("redo log")]),t._v(" 以及 "),a("code",[t._v("undo log")]),t._v(" 数据 记录到 "),a("code",[t._v("redo log buffer")]),t._v(" 中，然后再记录数据变更相关的 "),a("code",[t._v("redo log")]),t._v(" 到缓冲中，最后才在内存中更新数据，形成脏页。"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("注意，此时事务仍然还未提交。")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("undo log")]),t._v(" 的 "),a("code",[t._v("redo log")]),t._v(" 是记录了 "),a("code",[t._v("undo log")]),t._v(" 产生了哪些变化，防止mysql崩溃了导致 "),a("code",[t._v("undo log")]),t._v(" 的变更丢失，失去了可靠性。")]),t._v(" "),a("li",[a("code",[t._v("undo log")]),t._v(" 就是记录了一个回滚操作，当事务提交之后是需要删除的，但是删除的时机需要由 "),a("code",[t._v("purge")]),t._v(" 线程决定。")])]),t._v(" "),a("p",[t._v("如果在执行 "),a("code",[t._v("commit")]),t._v(" 之前宕机了，由于 "),a("code",[t._v("redo log")]),t._v(" 触发落盘的机制有三种，因此就算没 "),a("code",[t._v("commit")]),t._v(", "),a("code",[t._v("redo log")]),t._v(" 中也是会有数据的，所以可以检查 "),a("code",[t._v("redo log")]),t._v(" 中的日志来恢复数据和 "),a("code",[t._v("undo log")]),t._v(" 。")]),t._v(" "),a("p",[t._v("如果在执行 "),a("code",[t._v("commit")]),t._v(" 之后，redo 落盘完成了，此时触发脏页落盘表空间时宕机了，则启动后直接从 "),a("code",[t._v("redo log")]),t._v(" 中恢复数据即可。")]),t._v(" "),a("p",[a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("注意，这是所说的恢复数据是指恢复到表空间中，而不是内存")])]),t._v(" "),a("h3",{attrs:{id:"事务链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务链表"}},[t._v("#")]),t._v(" 事务链表")]),t._v(" "),a("p",[t._v("有了 "),a("code",[t._v("undo log")]),t._v(" 后，就可以实现数据的多版本了，下面来讲一讲 "),a("code",[t._v("RC")]),t._v(" 和 "),a("code",[t._v("RR")]),t._v(" 级别下是如何受到 "),a("code",[t._v("MVCC")]),t._v(" 的管控，从而实现了事务的隔离性，使得 "),a("code",[t._v("RC")]),t._v(" 防止了脏数据和"),a("code",[t._v("RR")]),t._v("防止了不可重复读。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("另外，"),a("code",[t._v("RR")]),t._v(" 还通过间隙锁防止了幻读，可通过"),a("code",[t._v("MySQL 锁")]),t._v("查阅。")])]),t._v(" "),a("p",[t._v("其实啊，每个事务在启动的时候，会给自己生成一个事务 Id，同时也会记录当前正在活跃的所有事务的id，即当前所有未提交的事务id，保存在一个叫"),a("code",[t._v("trx_sys")]),t._v("的事务链表中，并且把数组里面事务 ID 的最小值记为低水位 "),a("code",[t._v("up_limit_id")]),t._v(" ，当前系统里面"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("已经创建过的事务 ID 的最大值加 1 ")]),t._v("记为高水位 "),a("code",[t._v("low_limit_id")]),t._v("。")]),t._v(" "),a("p",[t._v("这是一个基本的链表结构：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- ctx 是当前事务 id，是最大的\nct-trx --\x3e trx11 --\x3e trx9 --\x3e trx6 --\x3e trx5 --\x3e trx3;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("这个视图数组和高水位，就形成了当前事务的一致性视图 "),a("code",[t._v("read-view")]),t._v("。")]),t._v(" "),a("p",[t._v("前面提到，开启事务有二种方式：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("begin")]),t._v(" 或 "),a("code",[t._v("start transaction")])]),t._v(" "),a("li",[a("code",[t._v("start transaction with consistent snapshot")])])]),t._v(" "),a("p",[t._v("其中这两种方式的区别其实就是"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("在什么时候才确定好这个事务链表的值")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("第一种方式启动的事务，会在第一次执行 SQL 语句的时候才确定好事务链表。")]),t._v(" "),a("li",[t._v("第二种方式启动的事务，会在执行完事务开启语句后就确定好事务链表了。")])]),t._v(" "),a("p",[t._v("并且 "),a("code",[t._v("RR")]),t._v(" 和 "),a("code",[t._v("RC")]),t._v(" 的区别就是：")]),t._v(" "),a("ul",[a("li",[t._v("在可重复读隔离级别下，事务链表一旦创建了直到事务提交之前，都不会发生变化")]),t._v(" "),a("li",[t._v("在读已提交隔离级别下，每次执行"),a("code",[t._v("SQL")]),t._v("语句都会重新创建事务链表。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("每当活跃的事务提交了之后，就会从事务链表之间移除，所以在 "),a("code",[t._v("RC")]),t._v(" 隔离级别下，每次执行 SQL 语句得到的事务链表可能都不一样。")])]),t._v(" "),a("p",[t._v("可以通过 "),a("code",[t._v("show engine innodb status")]),t._v(" ,就能够看到事务列表。")]),t._v(" "),a("h3",{attrs:{id:"read-view"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-view"}},[t._v("#")]),t._v(" read view")]),t._v(" "),a("p",[t._v("上面说到，这个事务链表包含的这些事务 ID，就是当前事务的"),a("code",[t._v("read view")]),t._v("，其图示大概如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/mysql_img/uplow.png",alt:"my"}})]),t._v(" "),a("p",[t._v("其中")]),t._v(" "),a("ul",[a("li",[a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("比低水位还小的那些事务，都是已经提交了的事务")]),t._v("，对于当前事务来说，是可见，也就是图中的绿色区域")]),t._v(" "),a("li",[a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("比高水位还高的那些事务，属于未来的还没开启的事务")]),t._v("，对于当前事务来说，是不可见的，即红色区域")]),t._v(" "),a("li",[t._v("而在黄色区域中的数据，对于不同的隔离级别有不同的情况\n"),a("ul",[a("li",[a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("如果在 "),a("code",[t._v("RR")]),t._v(" 级别下，由于事务链表从启动后就不会改变，因此如果读到的数据还是处于链表内的数据，也是不可见的")])]),t._v(" "),a("li",[a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("如果在 "),a("code",[t._v("RC")]),t._v(" 级别下，由于每次执行SQL链表都会改变，如果执行"),a("code",[t._v("SQL A")]),t._v("时，链表内有四个事务，执行"),a("code",[t._v("SQL B")]),t._v("的时候，可能就剩三个事务了")]),t._v("，因此就会存在在读取数据的时候，发现这个事务的 Id 在链表的范围内，却不在链表内，因此是可见的，因为这个事务是已经提交了的。")])])])]),t._v(" "),a("h3",{attrs:{id:"mvcc-的运作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvcc-的运作流程"}},[t._v("#")]),t._v(" MVCC 的运作流程")]),t._v(" "),a("p",[t._v("案例介绍：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("假设现有三个事务 A、B、C，它们之间的顺序如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/mysql_img/demo.png",alt:"my"}})]),t._v(" "),a("p",[t._v("假设")]),t._v(" "),a("ol",[a("li",[t._v("事务 A 开始前，系统里面只有一个活跃事务 ID 是 99；")]),t._v(" "),a("li",[t._v("事务 A、B、C 的版本号分别是 100、101、102，且当前系统里只有这四个事务；")]),t._v(" "),a("li",[t._v("三个事务开始前，(1,1）这一行数据的 row trx_id 是 90。")])]),t._v(" "),a("p",[t._v("下面分析下，A和B在不同的 "),a("code",[t._v("RR")]),t._v(" 和 "),a("code",[t._v("RC")]),t._v(" 隔离级别下会读到什么值，首先分析在 "),a("code",[t._v("RR")]),t._v(" 级别下：")]),t._v(" "),a("ol",[a("li",[t._v("事务 A 的 "),a("code",[t._v("read view")]),t._v(" 是 "),a("code",[t._v("[99,100]")])]),t._v(" "),a("li",[t._v("事务 B 的 "),a("code",[t._v("read view")]),t._v(" 是 "),a("code",[t._v("[99,100,101]")])]),t._v(" "),a("li",[t._v("事务 C 的 "),a("code",[t._v("read view")]),t._v(" 是 "),a("code",[t._v("[90,100,101,102]")])])]),t._v(" "),a("p",[t._v("当事务 A 执行查询语句的时候，事务 C 和 B 的更改都已经做好了，并且 C 已提交，B未提交：")]),t._v(" "),a("ol",[a("li",[t._v("此时会先查询到 B 的记录，对于事务 B 的 "),a("code",[t._v("trxid")]),t._v(" ,发现处于高水位位置，因此是不可见的，"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("这时候读取这条记录的回滚指针，到回滚段中找到上一条记录")])]),t._v(" "),a("li",[t._v("也就是事务 C 修改的数据，发现事务C的"),a("code",[t._v("trxid")]),t._v(" 是 102，也是高水位，因此同样是不可见的。")]),t._v(" "),a("li",[t._v("最后通过事务 C 的回滚指针找到事务id为90的数据，所以最终事务 A 读到的数据是 "),a("code",[t._v("1，1")])])]),t._v(" "),a("p",[t._v("如果在 "),a("code",[t._v("RC")]),t._v(" 级别下，由于每次执行SQL前都会更新视图数据，所以每次读取都相当于是只会读取到已提交事务的数据，所以事务 A 读到的就是事务 C 修改过的数据。")]),t._v(" "),a("p",[t._v("总结的说，一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，有三种情况：")]),t._v(" "),a("ul",[a("li",[t._v("版本未提交，不可见；")]),t._v(" "),a("li",[t._v("版本已提交，但是是在视图创建后提交的，不可见；")]),t._v(" "),a("li",[t._v("版本已提交，而且是在视图创建前提交的，可见。")])]),t._v(" "),a("h3",{attrs:{id:"快照读和当前读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快照读和当前读"}},[t._v("#")]),t._v(" 快照读和当前读")]),t._v(" "),a("p",[t._v("这种读取到历史版本数据的查询，称为"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("快照读")]),t._v("，也叫做"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("一致性非锁定读")]),t._v("。")]),t._v(" "),a("p",[t._v("与"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("快照读")]),t._v("对应的是"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("当前读")]),t._v("，也就是图中事务 B 的流程，当事务 B 在执行 "),a("code",[t._v("update")]),t._v(" 语句时，需要先读取数据到内存中，再进行修改。")]),t._v(" "),a("p",[t._v("这个读取必须是读取当前最新的版本数据，因为在历史版本数据上修改没有任何意义。因此这种读取最新数据的行为就叫做"),a("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("当前读")]),t._v("。")]),t._v(" "),a("p",[t._v("然后当事务 B 后面执行查询语句的时候，读取到最新版本的修改时，发现事务id是自己的，所以就直接读取自己最新的记录了。")]),t._v(" "),a("p",[t._v("另外，如果给 "),a("code",[t._v("select")]),t._v(" 语句加上 "),a("code",[t._v("share in lock mode")]),t._v(" 或 "),a("code",[t._v("for update")]),t._v(" 也是当前读。")])])}),[],!1,null,null,null);s.default=_.exports}}]);