(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{208:function(t,_,v){"use strict";v.r(_);var a=v(28),s=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"系统架构的发展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#系统架构的发展"}},[t._v("#")]),t._v(" 系统架构的发展")]),t._v(" "),v("p",[t._v("系统架构的发展是根据现实情况一步步改进得到的，随着用户量的增大，以往的系统架构并不能满足需求，因此衍生出架构的进化。")]),t._v(" "),v("h2",{attrs:{id:"单体系统架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单体系统架构"}},[t._v("#")]),t._v(" 单体系统架构")]),t._v(" "),v("p",[t._v("当站点功能与流量都很小时，只需"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("一个应用，将所有功能都集中在一个工程中，并部署在一台服务器上")]),t._v("，以减少部署节点和成本。例如将用户模块、订单模块、支付模块等都做在一个工程中，以一个应用的形式部署在一台服务器上：")]),t._v(" "),v("p",[v("img",{attrs:{src:"/images/single_jiagou01.jpg",alt:"单体架构"}})]),t._v(" "),v("p",[t._v("这个阶段通常是小型网站的发展阶段，由于用户数量不大，因此只需要一台服务器就足够处理。并且应用程序、数据库、文件等所有的资源都存储在同一台服务器中。")]),t._v(" "),v("p",[v("img",{attrs:{src:"/images/single_jiagoutu01.jpg",alt:"单体架构1"}})]),t._v(" "),v("h2",{attrs:{id:"应用服务和数据服务分离"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#应用服务和数据服务分离"}},[t._v("#")]),t._v(" 应用服务和数据服务分离")]),t._v(" "),v("p",[t._v("慢慢的当系统的用户越来越多的时候，并发量也会跟着变大，因此一台服务器的性能已经无法支撑这么多的用户请求了，这时候可以"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("将应用和数据分离出来。")])]),t._v(" "),v("p",[t._v("应用和数据分离后需要使用三台服务器")]),t._v(" "),v("ol",[v("li",[t._v("应用服务器： 更快更强大的CPU  （ 因为要处理大量的业务逻辑）")]),t._v(" "),v("li",[t._v("文件服务器： 存储大量用户上传的文件，因此需要更大的硬盘")]),t._v(" "),v("li",[t._v("数据库服务器： 需要进行快速的磁盘检索和数据缓存，因此需要更快的硬盘和更大的内存空间")])]),t._v(" "),v("p",[t._v("其架构图如下：")]),t._v(" "),v("p",[v("img",{attrs:{src:"/images/single_jiagoutu02.png",alt:"多服务器"}})]),t._v(" "),v("h2",{attrs:{id:"引入缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#引入缓存"}},[t._v("#")]),t._v(" 引入缓存")]),t._v(" "),v("p",[t._v("上阶段架构存在的问题是，由于用户量越来越大，数据库要查询的请求越来越多，因此数据库的压力会十分巨大，从而拖垮网站的运行。但是其实网站中的访问数据，是遵循二八定律的，即"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v(" 80% 的业务请求都集中在 20%的数据")])]),t._v(" "),v("p",[t._v("因此我们可以在这 20% 的数据缓存在内存中，这样就可以减少数据库的访问压力，从而提高数据库的写入性能。使用缓存后，数据库的访问压力可以得到有效缓解：")]),t._v(" "),v("p",[v("img",{attrs:{src:"/images/single_jiagoutu03.png",alt:"缓存架构3"}})]),t._v(" "),v("h2",{attrs:{id:"应用服务器集群架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#应用服务器集群架构"}},[t._v("#")]),t._v(" 应用服务器集群架构")]),t._v(" "),v("p",[t._v("目前我们的应用服务器只有一台，因此单一的应用服务器能够处理的请求连接是有限的")]),t._v(" "),v("ol",[v("li",[t._v("Cpu的计算能力有限（导致延迟响应）")]),t._v(" "),v("li",[t._v("内存资源有限（导致丢包或拒绝连接）")])]),t._v(" "),v("p",[t._v("因此，在网站访问高峰期，应用服务器成为了整个网站的瓶颈,"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("因此可以对应用服务器进行集群部署操作。并通过一个路由网关进行请求转发和负载均衡。")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("负载均衡调度服务器是将来自用户浏览器的访问请求分发到应用服务器集群中的任何一台服务器上")])]),t._v(" "),v("p",[v("img",{attrs:{src:"/images/cluster_jiagou01.png",alt:"集群架构"}})]),t._v(" "),v("p",[t._v("如果有更多的用户，则可以在集群中加入更多的应用服务器，使应用服务器的负载压力不再成为整个网站的瓶颈。")]),t._v(" "),v("p",[v("img",{attrs:{src:"/images/cluster_jiagoutu01.png",alt:"集群架构"}})]),t._v(" "),v("h2",{attrs:{id:"数据库读写分离"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库读写分离"}},[t._v("#")]),t._v(" 数据库读写分离")]),t._v(" "),v("p",[t._v("网站在使用缓存后，绝大部分的数据都可以通过读取缓存来进行访问，但仍有一部分读操作(缓存访问不命中、缓存过期)还有全部的写操作都需要访问数据库，因此，当用户量过高的时候，数据库会因为负载压力过大而成为网站的瓶颈")]),t._v(" "),v("p",[t._v("因此可以提供数据库的 主从热备 功能，")]),t._v(" "),v("ol",[v("li",[v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("配置两台数据库服务器的主从关系，即可以将一台数据库服务器的数据更新同步到另一台服务器上。")])]),t._v(" "),v("li",[v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("然后读操作通过从数据库，写操作则通过主数据库服务器")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"/images/mysql_read_write.png",alt:"读写分离"}})]),t._v(" "),v("h2",{attrs:{id:"反向代理和cdn加速"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反向代理和cdn加速"}},[t._v("#")]),t._v(" 反向代理和CDN加速")]),t._v(" "),v("p",[t._v("现在的架构已经能处理大部分的服务器请求了，因此需要在用户体验上进行优化，例如加速网站的访问速度，而加速网站访问速度的主要手段有两种")]),t._v(" "),v("ul",[v("li",[t._v("CDN")]),t._v(" "),v("li",[t._v("反向代理")])]),t._v(" "),v("p",[t._v("CDN和反向代理的基本原理都是缓存。")]),t._v(" "),v("ul",[v("li",[t._v("CDN 部署在"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("网络提供商的机房")]),t._v("，使用户在请求网站服务时，可以从举例自己最近的网络提供商机房获取数据。")]),t._v(" "),v("li",[t._v("反向代理部署在"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("网站的中心机房")]),t._v("，当用户请求到达中心机房后，首先访问的服务器是反向代理服务器，如果反向代理服务器中缓存着用户请求的资源，就将其直接返回给用户。")])]),t._v(" "),v("p",[t._v("使用CDN和反向代理的目的都是尽早返回数据给用户，一方面加快用户访问速度，另一方面也减轻后端服务器的负载压力。")]),t._v(" "),v("p",[t._v("架构图如下：\n"),v("img",{attrs:{src:"/images/cdn01.png",alt:"cdn"}})]),t._v(" "),v("h2",{attrs:{id:"分布式数据库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式数据库"}},[t._v("#")]),t._v(" 分布式数据库")]),t._v(" "),v("h2",{attrs:{id:"使用-nosql-和搜索引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用-nosql-和搜索引擎"}},[t._v("#")]),t._v(" 使用 NoSQL 和搜索引擎")]),t._v(" "),v("h2",{attrs:{id:"业务拆分"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#业务拆分"}},[t._v("#")]),t._v(" 业务拆分")]),t._v(" "),v("h2",{attrs:{id:"分布式服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式服务"}},[t._v("#")]),t._v(" 分布式服务")]),t._v(" "),v("p",[t._v("当用户访问量越来越大时，仅仅通过集群架构的水平扩展已经无法满足系统的要求了，因此需要将项目中的各个模块拆分到一个个单独的项目中，并部署到不同的服务器中，组成一个分布式架构。例如用户工程、订单工程、支付工程等")]),t._v(" "),v("p",[v("img",{attrs:{src:"/images/chuizhijiagou.png",alt:"chuizhijiagou"}})]),t._v(" "),v("p",[t._v("这种方式又称为"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("垂直拆分")])]),t._v(" "),v("h2",{attrs:{id:"微服务扩展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务扩展"}},[t._v("#")]),t._v(" 微服务扩展")]),t._v(" "),v("p",[t._v("当对各个模块进行拆分后，就会出现一些公共的代码冗余在不同的工程中，将这些在整个项目中冗余的功能模块抽取出来作为独立的工程，这些工程就是专门为那些调用它们的工程服务的。")]),t._v(" "),v("p",[t._v("这些抽取出来的功能就称为"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("微服务")]),t._v("，微服务应用称为服务提供者，调用微服务的工程称为服务消费者。\n"),v("img",{attrs:{src:"/images/mircoservice.png",alt:"chuizhijiagou"}})]),t._v(" "),v("p",[t._v("在服务数量较少的时候，可以让消费者直连提供者来调取服务。")]),t._v(" "),v("h2",{attrs:{id:"流动计算架构（需要学习的）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#流动计算架构（需要学习的）"}},[t._v("#")]),t._v(" 流动计算架构（需要学习的）")]),t._v(" "),v("p",[t._v("架构继续演变")]),t._v(" "),v("ul",[v("li",[t._v("随着功能的扩张，微服务就需要越来越多；")]),t._v(" "),v("li",[t._v("随着 PV 的增涨，消费者工程就需要越来越多；")]),t._v(" "),v("li",[t._v("随着消费者的扩张，为其提供服务的提供者服务器就需要越来越多，且每种提供者都要求创建为集群。")])]),t._v(" "),v("p",[t._v("因此消费者和提供者之间就不能够通过"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("直连")]),t._v("的方式进行连接了，因为它们之间的数量并不是一一对应的。因此需要在消费者和提供者之间搭建一个"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("注册中心")]),t._v("：")]),t._v(" "),v("ul",[v("li",[t._v("提供者将服务注册到注册中心，")]),t._v(" "),v("li",[t._v("消费者通过注册中心进行消费")])]),t._v(" "),v("p",[t._v("这样的好处是，"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("消费者无需再与提供者绑定了。提供者的宕机，对消费者不会产生直接的影响。")])]),t._v(" "),v("p",[t._v("另外，当服务越来越多的时候，在某些特殊情况下，例如淘宝的双十一活动，此时某些服务的 "),v("code",[t._v("QPS")]),t._v(" 会比较低，例如查询历史订单，但这些服务依旧占据着系统很大一部分的资源，而某些服务的"),v("code",[t._v("QPS")]),t._v("非常高，例如下单模块，因此需要一个"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("服务治理中心")]),t._v("，在某些情况对某些服务进行降级，或分配较低的权重，对整个系统资源进行统一调配。例如双十一时，停用查询历史订单和退货服务，以释放部分系统资源来帮助下单服务。")]),t._v(" "),v("p",[t._v("这里的资源调配分为两个方面：")]),t._v(" "),v("ul",[v("li",[t._v("预调配")]),t._v(" "),v("li",[t._v("实时调配")])]),t._v(" "),v("p",[t._v("其中预调配是系统架构师根据平日里系统每个服务的访问量进行的一个系统容量评估，这是一种经验的体现。而实时调配则是根据"),v("strong",{staticStyle:{color:"#3EAF7C"}},[t._v("服务监控中心")]),t._v("所提供的基于访问压力的实时系统容量评估数据，对各个服务性能进行实时调配的方案。")]),t._v(" "),v("p",[v("img",{attrs:{src:"/images/flowjiagou.png",alt:"知识网络arch"}})])])}),[],!1,null,null,null);_.default=s.exports}}]);