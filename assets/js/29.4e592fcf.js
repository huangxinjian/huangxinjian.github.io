(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{226:function(s,a,t){"use strict";t.r(a);var n=t(28),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[s._v("#")]),s._v(" 面向对象")]),s._v(" "),t("p",[s._v("这一章将学习面向对象的最基础的元素：")]),s._v(" "),t("ul",[t("li",[s._v("类")]),s._v(" "),t("li",[s._v("对象")]),s._v(" "),t("li",[s._v("方法")])]),s._v(" "),t("h2",{attrs:{id:"什么是面向对象？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象？"}},[s._v("#")]),s._v(" 什么是面向对象？")]),s._v(" "),t("p",[s._v("面向对象程序设计，即 OOP，是目前主流的程序设计的范型。我们即将学习的 "),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("Java 是完全面向对象的")]),s._v("，因此必须学习什么是 OOP，才能用好 Java。")]),s._v(" "),t("p",[s._v("首先，面向对象的程序是由对象组成的，每个对象包含了对外界"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("公开的特定功能部分")]),s._v("以及"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("隐藏的功能实现部分")]),s._v("。也就是说，在 OOP 中，我们无需关心对象的具体实现，只需关心这个功能如何使用，以及使用后会得到什么结果即可。")]),s._v(" "),t("p",[s._v("对于传统的结构化语言来说，在编程时通过设计一系列的过程（算法）来解决问题，当过程确定后，再去选择使用什么样的数据结构。")]),s._v(" "),t("blockquote",[t("p",[s._v("例如 Pascal 的作者有本书的书名就是 《算法 + 数据结构 = 程序》")])]),s._v(" "),t("p",[s._v("但对于 OOP 来说，我们通常先选择使用什么样的数据结构，再去考虑操作数据结构的算法实现。")]),s._v(" "),t("h2",{attrs:{id:"类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[s._v("#")]),s._v(" 类")]),s._v(" "),t("p",[t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("类（Class）")]),s._v(" 是面向对象中最重要的存在之一，它是构造对象的模板。由类"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("构造（Construct）")]),s._v("出对象的过程称为"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("创建类的实例")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[s._v("你可以把对象认为是糖果，而类是制造糖果的糖果机")])]),s._v(" "),t("h3",{attrs:{id:"类之间的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类之间的关系"}},[s._v("#")]),s._v(" 类之间的关系")]),s._v(" "),t("p",[s._v("在类与类之间，存在三种比较常见的关系：")]),s._v(" "),t("ul",[t("li",[s._v("继承关系")]),s._v(" "),t("li",[s._v("依赖关系")]),s._v(" "),t("li",[s._v("聚合关系")])]),s._v(" "),t("p",[s._v("详情可通过设计模式章节了解")]),s._v(" "),t("h3",{attrs:{id:"类的访问权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的访问权限"}},[s._v("#")]),s._v(" 类的访问权限")]),s._v(" "),t("p",[s._v("在 Java 中，访问权限有四种, 它们之间的区别如下：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th"),s._v(" "),t("th",[s._v("同一个类")]),s._v(" "),t("th",[s._v("同一个包")]),s._v(" "),t("th",[s._v("子类")]),s._v(" "),t("th",[s._v("所有类")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("private")]),s._v(" "),t("td",[s._v("*")]),s._v(" "),t("td"),s._v(" "),t("td"),s._v(" "),t("td")]),s._v(" "),t("tr",[t("td",[s._v("default")]),s._v(" "),t("td",[s._v("*")]),s._v(" "),t("td",[s._v("*")]),s._v(" "),t("td"),s._v(" "),t("td")]),s._v(" "),t("tr",[t("td",[s._v("protected")]),s._v(" "),t("td",[s._v("*")]),s._v(" "),t("td",[s._v("*")]),s._v(" "),t("td",[s._v("*")]),s._v(" "),t("td")]),s._v(" "),t("tr",[t("td",[s._v("public")]),s._v(" "),t("td",[s._v("*")]),s._v(" "),t("td",[s._v("*")]),s._v(" "),t("td",[s._v("*")]),s._v(" "),t("td",[s._v("*")])])])]),s._v(" "),t("h3",{attrs:{id:"producted-误区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#producted-误区"}},[s._v("#")]),s._v(" Producted 误区")]),s._v(" "),t("p",[s._v("https://bbs.csdn.net/topics/392045537")]),s._v(" "),t("p",[s._v("https://blog.csdn.net/blacktal/article/details/81198579")]),s._v(" "),t("p",[s._v("https://blog.csdn.net/dawn_after_dark/article/details/74453915")]),s._v(" "),t("p",[s._v("https://blog.csdn.net/dawn_after_dark/article/details/74357049")]),s._v(" "),t("h2",{attrs:{id:"对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[s._v("#")]),s._v(" 对象")]),s._v(" "),t("p",[s._v("通过类实例化后，我们就会得到一个对象，对象有三个特征：")]),s._v(" "),t("ul",[t("li",[s._v("对象的状态（"),t("strong",[s._v("state")]),s._v("）")]),s._v(" "),t("li",[s._v("对象的行为（"),t("strong",[s._v("behavior")]),s._v("）")]),s._v(" "),t("li",[s._v("对象标识（"),t("strong",[s._v("identity")]),s._v("）")])]),s._v(" "),t("p",[s._v("通常我们会在类中定义一些属性，这些属性通常称为"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("实例域")]),s._v("，而这些属性的值则称为"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("实例域值")]),s._v("，这些值的集合就是当前这个"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("对象的状态 State")]),s._v("。")]),s._v(" "),t("p",[s._v("至于对象的行为，则是我们定义在类中，用来操作数据的方法，它可以改变对象的状态。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意，如果想要修改对象的状态，必须通过调用方法来实现，否则代表了封装性遭到了破坏")])]),s._v(" "),t("p",[s._v("对象标识是对象的唯一标识，是用来区分出一个类的多个实例之间的区别的。")]),s._v(" "),t("h3",{attrs:{id:"封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[s._v("#")]),s._v(" 封装")]),s._v(" "),t("p",[s._v("封装是面向对象的三大特点之一，有时候又称为"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("数据隐藏")]),s._v("。其本质其实是将对象的实例域通过权限修饰符 "),t("code",[s._v("private")]),s._v(" 修饰起来，从而让外界无法直接访问到这些属性。")]),s._v(" "),t("p",[s._v("因此，实现封装的关键就是，"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("不能让类中的方法直接访问到其他类的实例域")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"封装的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装的优点"}},[s._v("#")]),s._v(" 封装的优点")]),s._v(" "),t("p",[s._v("封装的好处在与我们保护我们的实例域不受外界随便修改，并且可以提供自由度更高的方法供外部者调用，例如某个类存在以下两个域：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" firstname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" lastName "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("那么就可以提供一个 "),t("code",[s._v("getName")]),s._v(" 方法，来美化我们的返回结果。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" firstname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" lastname"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("同时也可以对类中想要赋值给某个域的操作进行验证：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setFirstName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" fn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fn "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'不能为空'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("firstname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"对象与对象变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象与对象变量"}},[s._v("#")]),s._v(" 对象与对象变量")]),s._v(" "),t("p",[s._v("在 Java 中，通过构造器来构造新对象，例如我们想要构造一个 Date 对象：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),s._v(" birthday "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("其中，Date 是一个对象，而 "),t("code",[s._v("birthday")]),s._v(" 是一个对象变量，其内存结构如图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/java_object.jpg",alt:"对象"}})]),s._v(" "),t("p",[s._v("但对象与对象变量之间，是有很大的区别的，让我们来看下面这个例子")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),s._v(" deadline"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在这里，"),t("code",[s._v("deadline")]),s._v(" 是一个对象变量，它并不是一个对象，只是它可以引用 Date 类型的对象。如果我们此时使用 "),t("code",[s._v("deadline")]),s._v(" 调用来自于 "),t("code",[s._v("Date")]),s._v(" 中的任何方法，都会报错：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("deadline"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// error")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("我们必须对 "),t("code",[s._v("deadline")]),s._v(" 进行初始化后，才能够使用，例如我们将 "),t("code",[s._v("birthday")]),s._v(" 赋值给 "),t("code",[s._v("deadline")]),s._v(" ：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("deadline "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" birthday"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("此时内存图如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/java_object2.jpg",alt:"对象2"}})]),s._v(" "),t("p",[s._v("也就是说，"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("一个对象变量并没有实际包含一个对象，而仅仅是引用一个对象而已。")]),s._v("在 Java 中，任何对象变量的值都是对"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("存储在堆")]),s._v("中的对象的引用，"),t("code",[s._v("new")]),s._v(" 操作符返回的就是一个引用。")]),s._v(" "),t("h2",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[s._v("#")]),s._v(" 方法")]),s._v(" "),t("p",[s._v("方法用来操作对象以及存取它们的实例域，每个方法都有二个要素，称为方法的签名：")]),s._v(" "),t("ul",[t("li",[s._v("方法名")]),s._v(" "),t("li",[s._v("方法参数类型")])]),s._v(" "),t("blockquote",[t("p",[s._v("注意，返回类型不是方法签名的一部分")])]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("plusCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" conut"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"方法参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法参数"}},[s._v("#")]),s._v(" 方法参数")]),s._v(" "),t("p",[s._v("一般来说，一个普通方法拥有两种参数 ：")]),s._v(" "),t("ul",[t("li",[s._v("隐式参数")]),s._v(" "),t("li",[s._v("显式参数")])]),s._v(" "),t("p",[s._v("其中，隐式参数又被称为方法的调用者，并且在每个方法中，this 也表示隐式参数。而显式参数就是明显列在方法声明中的参数。例如存在对象 "),t("code",[s._v("Employee employee")]),s._v("，调用它的 "),t("code",[s._v("setName")]),s._v(" 方法：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// setName(String name)")]),s._v("\nemployee"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mike"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("其中 "),t("code",[s._v("employee")]),s._v(" 就是隐式参数，"),t("code",[s._v("name")]),s._v(" 就是显式参数。如果我们在 "),t("code",[s._v("setName")]),s._v(" 中使用 "),t("code",[s._v("this")]),s._v(" ：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("此时的 "),t("code",[s._v("this")]),s._v(" 就是上面的 "),t("code",[s._v("employee")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"可变参数的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可变参数的方法"}},[s._v("#")]),s._v(" 可变参数的方法")]),s._v(" "),t("p",[s._v("在 Java 5.0 之后，提供了一种可变参数的写法 ：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("我们可以这样子调用：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v('x.setName("a")')])]),s._v(" "),t("li",[t("code",[s._v('x.setName("a", "b")')])]),s._v(" "),t("li",[t("code",[s._v('x.setName("a", "b", "c")')])]),s._v(" "),t("li",[t("code",[s._v('x.setName(new String[] {"a", "b", "c"})')]),s._v(" 等等")])]),s._v(" "),t("p",[s._v("无论多少个参数都可以。这就是可变参数的写法，通过 "),t("code",[s._v("...")]),s._v(" 表示该参数是动态的，可以为一个或多个。"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("其实质相当于 "),t("code",[s._v("String[] name")]),s._v("。")])]),s._v(" "),t("h3",{attrs:{id:"参数传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数传递"}},[s._v("#")]),s._v(" 参数传递")]),s._v(" "),t("p",[s._v("将参数传递给方法的时候，通过有两种情况：")]),s._v(" "),t("ul",[t("li",[t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("值传递（call by value）")]),s._v(" ———— 表示方法接收的是调用者提供的"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("值")])]),s._v(" "),t("li",[t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("引用传递（call by reference）")]),s._v(" ———— 表示方法接收的是调用者提供的"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("变量地址")])])]),s._v(" "),t("p",[s._v("不过在 Java 是"),t("strong",[s._v("完全")]),s._v("的值传递，例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tripleValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("然后调用这个方法：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tripleValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("程序执行完后，a 的值依旧是10，因为"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v(" x 只是 a 的一个拷贝")]),s._v("。")]),s._v(" "),t("p",[s._v("不过，在 Java 中，除了基本数据类型，还有引用数据类型，下面我们来看看传递一个引用对象会怎样：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tripleValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setSalary")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("上面的代码当我们真正调用时，是可以改变传入给方法中的 "),t("code",[s._v("Employee")]),s._v(" 对象的值的。但这是不是说，当我传递对象给方法的时候，其实是引用传递呢？")]),s._v(" "),t("p",[s._v("其实并不是的，因为我们传递给方法里的，依旧是一个拷贝，只不过，这次"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("拷贝的是引用的地址")]),s._v("。其内存图如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/java_object3.png",alt:"对象3"}})]),s._v(" "),t("p",[s._v("总结一下：")]),s._v(" "),t("ol",[t("li",[s._v("一个方法不能修改基本数据类型的参数")]),s._v(" "),t("li",[s._v("一个方法可以修改一个对象参数的状态")]),s._v(" "),t("li",[s._v("一个方法不能让一个对象参数引用一个新的对象")])]),s._v(" "),t("h3",{attrs:{id:"更改器方法和访问器方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更改器方法和访问器方法"}},[s._v("#")]),s._v(" 更改器方法和访问器方法")]),s._v(" "),t("p",[s._v("这两种方法都是相对于实例域的，区别在于：")]),s._v(" "),t("ul",[t("li",[s._v("如果"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("某个方法只访问对象而不修改对象")]),s._v("，就称为访问器方法（accessor method）")]),s._v(" "),t("li",[s._v("如果"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("某方法调用后会修改对象的状态")]),s._v("，例如 "),t("code",[s._v("GregorianCalendar")]),s._v(" 类的 "),t("code",[s._v("Add")]),s._v(" 方法，这种方法就称为更改器方法")])]),s._v(" "),t("h3",{attrs:{id:"构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[s._v("#")]),s._v(" 构造函数")]),s._v(" "),t("p",[s._v("构造函数用来定义对象的初始状态，Java 提供了多种编写改造函数的方法")]),s._v(" "),t("h4",{attrs:{id:"默认域初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认域初始化"}},[s._v("#")]),s._v(" 默认域初始化")]),s._v(" "),t("p",[s._v("如果我们在构造器中没有显式的给域进行赋值，则会被自动赋予默认值，其中：")]),s._v(" "),t("ul",[t("li",[s._v("数值型的默认值为 0")]),s._v(" "),t("li",[s._v("布尔型的默认值为 false")]),s._v(" "),t("li",[s._v("引用类型的默认值为 null")])]),s._v(" "),t("blockquote",[t("p",[s._v("该种方式完全不建议使用，如果想要赋予默认值，也最好手动初始化")])]),s._v(" "),t("h4",{attrs:{id:"显式域初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显式域初始化"}},[s._v("#")]),s._v(" 显式域初始化")]),s._v(" "),t("p",[s._v("如果对于某一个域我们想无论调用哪种构造函数，都可以赋予一样的值的话，就可以采用显式域初始化，也就是不通过构造函数来初始化，直接在域声明时初始化：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("但是要注意的是，"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("显式域初始化的赋值操作，是比执行构造器要早的。")]),s._v("也就是说，如果我们在后面构造器中又给 "),t("code",[s._v("name")]),s._v(" 赋值了，会覆盖掉这个初始化值。")]),s._v(" "),t("p",[s._v("如果对初始化值有一定要求，我们还可以通过函数来初始化：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" nextId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 默认初始化值 0")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("assignId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("assignId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nextId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    nextId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h4",{attrs:{id:"默认构造器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认构造器"}},[s._v("#")]),s._v(" 默认构造器")]),s._v(" "),t("p",[s._v("如果在编写一个类时，没有编写构造器，那么系统就会提供一个"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("默认的无参构造器")]),s._v("，并对所有的实例域初始化为默认域值。")]),s._v(" "),t("blockquote",[t("p",[s._v("不过要注意的是，如果我们自己提供了任意一个有参构造器，该无参构造器都不会被提供。")])]),s._v(" "),t("h4",{attrs:{id:"重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[s._v("#")]),s._v(" 重载")]),s._v(" "),t("p",[s._v("有些类可能存在多个有参构造器，每个构造器的参数类型、参数个数不一样，例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v("这种特征就叫做重载（overload），它们存在"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("相同的名字，参数的个数、顺序不同")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意，重载适用于任何方法，不止是构造器")])]),s._v(" "),t("h4",{attrs:{id:"初始化块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化块"}},[s._v("#")]),s._v(" 初始化块")]),s._v(" "),t("p",[s._v("除了在构造器中设置值、在声明域时赋值，还有一种叫做 "),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("构造代码块")]),s._v(" 的方式：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ss"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("这个代码块的执行顺序，是跟声明域时初始化同级的，"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("如果同时存在声明时初始化和代码块，则按照顺序执行。")]),s._v("总之构造函数是最后执行的。")]),s._v(" "),t("h3",{attrs:{id:"调用构造器顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用构造器顺序"}},[s._v("#")]),s._v(" 调用构造器顺序")]),s._v(" "),t("p",[s._v("下面总结一下当我们执行一个 "),t("code",[s._v("new Employee()")]),s._v(" 时，所执行的流程：")]),s._v(" "),t("ol",[t("li",[s._v("所有的数据域都被初始化为默认值")]),s._v(" "),t("li",[s._v("按照在类声明中出现的次序，依次执行所有的域初始化语句和初始块")]),s._v(" "),t("li",[s._v("如果构造器第一行调用了别的构造器，则执行别的构造器主体")]),s._v(" "),t("li",[s._v("执行构造器主体")])]),s._v(" "),t("h2",{attrs:{id:"final-和-static"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final-和-static"}},[s._v("#")]),s._v(" final 和 static")]),s._v(" "),t("p",[s._v("final 和 static 都是 java 中比较常用的关键字，所以我们需要搞清楚它们之间的区别是什么：")]),s._v(" "),t("h3",{attrs:{id:"final"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final"}},[s._v("#")]),s._v(" final")]),s._v(" "),t("p",[s._v("final 可以用来修饰 类、变量、方法。")]),s._v(" "),t("h4",{attrs:{id:"final-修饰变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final-修饰变量"}},[s._v("#")]),s._v(" final 修饰变量")]),s._v(" "),t("blockquote",[t("p",[s._v("它表示这个变量只能被赋值一次，一旦被赋值之后，就不能够被更改了。")])]),s._v(" "),t("p",[s._v("被final修饰的变量称为常量，一经初始化，无法修改，变量又分为成员变量和局部变量两种情况：")]),s._v(" "),t("ul",[t("li",[s._v("成员变量： final 修饰成员变量，不需要立即初始化，但必须在构造函数中进行初始化")]),s._v(" "),t("li",[s._v("局部变量： 需要立即初始化才能使用")])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("如果经常希望某个常量可以在一个类中的多个方法使用，可以把这个常量称为 类常量，可以使用关键字 "),t("strong",[s._v("static final")]),s._v(" 修饰。")])]),s._v(" "),t("h4",{attrs:{id:"final-修饰方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final-修饰方法"}},[s._v("#")]),s._v(" final 修饰方法")]),s._v(" "),t("p",[s._v("final修饰的方法不能被重写，但是可以被重载")]),s._v(" "),t("h4",{attrs:{id:"final-修饰类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final-修饰类"}},[s._v("#")]),s._v(" final 修饰类")]),s._v(" "),t("p",[s._v("final修饰的类不能被继承，如果类被final修饰了，则类中的方法都会全部变为 final 方法，"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("但是不包括类中的域")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"static"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#static"}},[s._v("#")]),s._v(" static")]),s._v(" "),t("p",[s._v("static 表示静态的意思，一旦某个方法或者某个域被修饰了 static 修饰符，就证明了它属于"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("类的成员")]),s._v("。这些类成员会在类"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("第一次加载")]),s._v("的时候，进行初始化。")]),s._v(" "),t("p",[s._v("static 一般用来修饰变量和方法，下面来了解下这两种的区别")]),s._v(" "),t("h4",{attrs:{id:"static-修饰域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#static-修饰域"}},[s._v("#")]),s._v(" static 修饰域")]),s._v(" "),t("p",[s._v("当对域添加了 static 修饰时，代表了这个类中只有一个这个的域，被这个类所有的对象共享。例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" nextId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("无论创建多少了 "),t("code",[s._v("Employee")]),s._v(" 对象，每个对象都会有一份属于自己的 "),t("code",[s._v("id")]),s._v(" 域的拷贝，但是每个对象实例都将"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("共享")]),s._v("一个 "),t("code",[s._v("nextId")]),s._v(" 域。")]),s._v(" "),t("h4",{attrs:{id:"static-修饰方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#static-修饰方法"}},[s._v("#")]),s._v(" static 修饰方法")]),s._v(" "),t("p",[s._v("被 static 修饰的方法称为静态方法，这种方法"),t("strong",{staticStyle:{color:"#3EAF7C"}},[s._v("不能对对象状态实时操作")]),s._v("。也就是说，不能够在静态方法中访问实例域，也就是说，静态方法是没有隐式对象的，即没有 "),t("code",[s._v("this")]),s._v("。 例如在 "),t("code",[s._v("Employee")]),s._v(" 的静态方法中，不能访问 "),t("code",[s._v("id")]),s._v(" 实例域 ：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Employee")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" nextId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// System.out.println(id)  // error, won't work!")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nextId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// can work!")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);